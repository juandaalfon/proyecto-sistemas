#include <WiFi.h>
#include <WebServer.h>

// Configuración Wi-Fi
const char* ssid = "TU_SSID";
const char* password = "TU_PASSWORD";

// Pines y variables
#define SOUND_SENSOR 25 // Pin conectado a DO del KY-038
#define LED_GREEN 26    // Pin conectado al LED verde
#define LED_RED 27      // Pin conectado al LED rojo

WebServer server(80);

int soundCounter = 0;        // Contador de sonidos fuertes
unsigned long startTime = 0; // Tiempo de inicio para el conteo
bool redLedActive = false;   // Bandera para indicar si el LED rojo está encendido
bool countingEnabled = true; // Bandera para habilitar/deshabilitar el conteo

void setup() {
  // Configuración de pines
  pinMode(SOUND_SENSOR, INPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);

  // LEDs iniciales
  digitalWrite(LED_GREEN, HIGH);
  digitalWrite(LED_RED, LOW);

  startTime = millis();

  // Conexión a Wi-Fi
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("Conectando a Wi-Fi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConectado a Wi-Fi!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // Configuración del servidor
  server.on("/", handleRoot);
  server.begin();
}

void loop() {
  server.handleClient();

  int soundDetected = digitalRead(SOUND_SENSOR); // Lee el estado del sensor

  if (!redLedActive) {
    if (countingEnabled) {
      if (soundDetected == HIGH) {
        soundCounter++;
        delay(100);
      }

      if (millis() - startTime >= 10000) {
        if (soundCounter >= 5) {
          activateRedLed();
          countingEnabled = false;
        } else {
          soundCounter = 0;
          startTime = millis();
        }
      }
    }
  } else {
    if (soundDetected == LOW) {
      if (millis() - startTime >= 30000) {
        deactivateRedLed();
      }
    } else {
      startTime = millis();
    }
  }
}

// Función para activar el LED rojo
void activateRedLed() {
  redLedActive = true;
  startTime = millis();
  digitalWrite(LED_GREEN, LOW);
  digitalWrite(LED_RED, HIGH);
}

// Función para desactivar el LED rojo
void deactivateRedLed() {
  redLedActive = false;
  digitalWrite(LED_RED, LOW);
  digitalWrite(LED_GREEN, HIGH);

  soundCounter = 0;
  countingEnabled = true;
  startTime = millis();
}

// Página principal
void handleRoot() {
  String html = R"rawliteral(
    <!DOCTYPE html>
    <html>
    <head>
      <title>Sonido de los salones</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          text-align: center;
          margin: 0;
          padding: 0;
          background-color: #f4f4f4;
        }
        .container {
          margin-top: 50px;
        }
        .status-box {
          display: inline-block;
          padding: 20px;
          border-radius: 10px;
          font-size: 24px;
          font-weight: bold;
          color: white;
          width: 300px;
          text-align: center;
        }
        .green {
          background-color: green;
        }
        .red {
          background-color: red;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Sonido de los salones</h1>
        <div class="status-box %STATUS_CLASS%">
          %STATUS_TEXT%
        </div>
      </div>
    </body>
    </html>
  )rawliteral";

  // Modifica el HTML según el estado
  if (redLedActive) {
    html.replace("%STATUS_CLASS%", "red");
    html.replace("%STATUS_TEXT%", "Mucho ruido");
  } else {
    html.replace("%STATUS_CLASS%", "green");
    html.replace("%STATUS_TEXT%", "Bien");
  }

  server.send(200, "text/html", html);
}